% Reset the Command Window and the Workspace.
clear;
clc;

%% Variables which need to be manually calculated and changed if the Yokogawa settings are modified e.g. exposre time.
removeChannel = 'O8';
desiredWell = 'G03';
desiredField = 'F007';

%% Read the images in. 
message = sprintf('Hello user, I have become self aware. Get a folder of TIFF images from the Yokogawa (do not include any of the other files which are produced). Ensure that the images you wish to analyse are only of a red or green channel. Ensure that the red channel is a lower number than the green channee.g. If Red is C2, then Green might be C3, C4 or C5.');
uiwait(msgbox(message));

% Open the file (in this case a .tiff) needed for nuclear analysis. 
[Original_Im, Original_Path] = uigetfile('*.tif*');

% We now need to set the WD to Original_Path so as to create a new dir in
%the correct location. 
cd(Original_Path);

% Here, Matlab can read and show the image. 
Original_Im_Read = imread(Original_Im);

%% list all the files within the directory and filter them, to remove
% any funny single character names (e.g. '.') which I've seen appear.
allFiles = dir(Original_Path);
allNames = {allFiles.name};
numberOfImages = size(allNames);
numberOfImages = numberOfImages(2);
nameLength =  cellfun('length',allNames);
logicalRepresentation = nameLength > 50;

% Here are the correct names, generated by the process above. 
correctNames = allNames(logicalRepresentation);
numberOfCorrectNames = numel(correctNames);

%% Remove undesirable channels.
% Array for channels of correct names. 
channelArray = cell(1,1);

for q=1:numberOfCorrectNames
    % Extracting the first file name as a string. 
    Name = correctNames{q};
   
    % Extracting the channel from the 'correctNames' string. 
    channel = Name(end-5:end-4);
    channel = {channel};
    channelArray(q,1) = channel; 
end

% We need to remove all names from the list which aren't of the red or
% green channel. 
x = ismember(channelArray, removeChannel); % <-- Flag the ones that have '08' as their channel. 
correctNames(x) = []; % <-- Delete all the flagged lines at once.
numberOfCorrectNames = numel(correctNames);

%% Remove all images from our list which aren't of the desired well.

wellArray = cell(1,1); % Cell array to store information concerning well identity  

correctNames = rot90(correctNames,3);% We need to rotate the name array for use later on. 

for q=1:numberOfCorrectNames
    % Extracting the first file name as a string. 
    Name = correctNames{q};
    
    % Extracting the well from the 'correctNames' string. 
    well = Name(end-28:end-26);
    well = {well};
    wellArray(q,1) = well; 
end

% We need to remove all names from the list which aren't of the red or
% green channel. 
x = ismember(wellArray, desiredWell); % <-- Flag the ones that have '08' as their channel. 
correctNames(~x) = []; % <-- Delete all the flagged lines at once.
numberOfCorrectNames = numel(correctNames);

%% Remove all images from our list which aren't of the desired field.

fieldArray = cell(1,1); % Cell array to store information concerning well identity  

for q=1:numberOfCorrectNames
    % Extracting the first file name as a string. 
    Name = correctNames{q};
    
    % Extracting the well from the 'correctNames' string. 
    field = Name(end-19:end-16);
    field = {field};
    fieldArray(q,1) = field; 
end

% We need to remove all names from the list which aren't of the red or
% green channel. 
x = ismember(fieldArray, desiredField); % <-- Flag the ones that have '08' as their channel. 
correctNames(~x) = []; % <-- Delete all the flagged lines at once.
numberOfCorrectNames = numel(correctNames);

%% Enter 2 loops, one through wellFieldArray and another through correctNames. 

% Make a blank array for concatenation later. 
stack = [];

for q=1:numberOfCorrectNames % Loop through the correctNames. 
    
progress = (q/numberOfCorrectNames)*100    

% Stack name.
tif = '.tif';
outputFileName = strcat(desiredWell, desiredField, tif);
outputFileName = char(outputFileName);

% Read the image we need.
Name = correctNames{q};
iterationImage = imread(Name);
iterationImage = uint8(iterationImage);

% Concatenate the images together into a hyperstack if they are of the correct well and field. 
stack = cat(3, stack, iterationImage);
end 

% Save the image. 
for k=1:length(stack(1, 1, :))
    imwrite(stack(:, :, k), outputFileName, 'WriteMode', 'append',  'Compression','none');
end 
